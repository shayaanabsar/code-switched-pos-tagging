[['cicling', 'er', 'ki', 'halo'], ['amar', 'aar', "chaitali'r", 'common', 'ek', 'friend', 'er', 'saathe', 'dekha', '.']]
[[15, 3, 3, 0], [12, 12, 15, 14, 1, 15, 3, 15, 0, 12]]
torch.Size([2, 10, 19])
tensor([[[-3.1868, -2.9584, -3.3134, -3.0106, -2.6109, -3.4896, -3.2357,
          -2.8887, -3.4406, -3.3337, -2.8196, -2.5065, -2.9765, -2.7616,
          -2.9863, -2.9683, -2.5441, -3.0026, -2.6726],
         [-3.0831, -3.4618, -3.4145, -2.7041, -2.4800, -3.1712, -3.0903,
          -3.0395, -3.1293, -2.5683, -2.8029, -2.8989, -2.8906, -2.8367,
          -3.0379, -2.7801, -2.9654, -3.1337, -3.0245],
         [-2.6919, -3.4630, -3.3874, -2.4635, -2.7613, -3.3089, -2.8115,
          -3.0316, -2.9442, -2.8692, -3.4721, -3.1033, -3.3068, -3.3122,
          -3.0174, -2.8416, -2.3613, -3.0265, -2.7269],
         [-3.1256, -3.3446, -3.1344, -2.7085, -2.4075, -3.0737, -3.2070,
          -3.0452, -2.7866, -3.2583, -2.8711, -3.5943, -2.4829, -2.8995,
          -3.4127, -2.4723, -3.1141, -3.2958, -2.7372],
         [-2.9740, -2.9663, -2.9442, -2.9392, -2.9125, -2.9545, -2.9789,
          -2.9347, -2.9130, -2.9797, -2.9311, -2.9610, -2.9545, -2.9540,
          -2.9226, -2.9477, -2.9505, -2.9186, -2.9119],
         [-2.9740, -2.9663, -2.9442, -2.9392, -2.9125, -2.9545, -2.9789,
          -2.9347, -2.9130, -2.9797, -2.9311, -2.9610, -2.9545, -2.9540,
          -2.9226, -2.9477, -2.9505, -2.9186, -2.9119],
         [-2.9740, -2.9663, -2.9442, -2.9392, -2.9125, -2.9545, -2.9789,
          -2.9347, -2.9130, -2.9797, -2.9311, -2.9610, -2.9545, -2.9540,
          -2.9226, -2.9477, -2.9505, -2.9186, -2.9119],
         [-2.9740, -2.9663, -2.9442, -2.9392, -2.9125, -2.9545, -2.9789,
          -2.9347, -2.9130, -2.9797, -2.9311, -2.9610, -2.9545, -2.9540,
          -2.9226, -2.9477, -2.9505, -2.9186, -2.9119],
         [-2.9740, -2.9663, -2.9442, -2.9392, -2.9125, -2.9545, -2.9789,
          -2.9347, -2.9130, -2.9797, -2.9311, -2.9610, -2.9545, -2.9540,
          -2.9226, -2.9477, -2.9505, -2.9186, -2.9119],
         [-2.9740, -2.9663, -2.9442, -2.9392, -2.9125, -2.9545, -2.9789,
          -2.9347, -2.9130, -2.9797, -2.9311, -2.9610, -2.9545, -2.9540,
          -2.9226, -2.9477, -2.9505, -2.9186, -2.9119]],
        [[-2.9192, -3.1234, -2.7373, -2.6460, -2.4465, -3.3852, -3.4165,
          -2.6023, -2.8806, -3.4123, -2.8548, -3.3698, -2.9337, -3.0489,
          -3.1975, -2.8895, -3.0696, -2.9220, -2.8041],
         [-2.7778, -3.0213, -3.3179, -2.9396, -2.2232, -3.0224, -3.3369,
          -3.0957, -2.9959, -3.1032, -2.9164, -3.3938, -2.7652, -3.2226,
          -3.0298, -2.7011, -2.8678, -2.7494, -3.2046],
         [-2.6040, -2.9858, -3.1440, -2.7858, -2.5701, -3.4574, -3.2194,
          -2.7330, -2.8853, -3.3299, -3.1173, -3.4322, -2.7722, -3.0184,
          -2.9884, -2.9602, -2.8081, -3.0760, -2.6677],
         [-2.9392, -3.0386, -3.0192, -2.9386, -2.6374, -2.8772, -3.4342,
          -3.0067, -2.9443, -3.3776, -2.9383, -3.1883, -2.6664, -3.0867,
          -3.2636, -3.0339, -2.7370, -2.7375, -2.5786],
         [-2.9148, -2.8798, -3.1462, -2.8149, -2.7960, -3.0924, -3.0977,
          -2.8527, -3.0104, -3.0684, -2.9168, -3.4346, -2.5971, -2.9866,
          -3.0885, -3.2406, -2.9288, -2.5396, -2.9319],
         [-3.0349, -3.3329, -3.0595, -2.7408, -2.5929, -3.2783, -3.1168,
          -2.9762, -3.0652, -3.2770, -3.1332, -3.0674, -2.5677, -2.8752,
          -3.0848, -3.1059, -2.9131, -2.8205, -2.4652],
         [-2.6721, -2.8228, -3.0736, -2.6134, -2.4947, -3.3820, -3.1666,
          -2.8545, -3.2283, -3.0551, -2.8759, -3.1354, -2.7863, -3.0743,
          -3.1638, -3.0411, -2.9802, -2.8564, -3.1487],
         [-2.7782, -2.9433, -3.4517, -2.7708, -2.8525, -3.1531, -3.3453,
          -2.7530, -2.9205, -3.1119, -2.8150, -3.1893, -2.7477, -2.9865,
          -3.2015, -2.7644, -3.2526, -3.0215, -2.4504],
         [-2.7957, -2.8177, -3.6064, -2.7457, -2.7668, -3.2572, -3.2046,
          -2.3748, -3.2557, -3.2455, -2.8770, -3.2218, -2.6559, -2.9859,
          -3.1780, -2.9051, -2.9081, -3.1899, -2.7139],
         [-2.7304, -2.9852, -3.4788, -2.9510, -2.4861, -3.1595, -3.2869,
          -2.8411, -2.8541, -3.3468, -2.6802, -3.3615, -3.1580, -3.1642,
          -2.9125, -2.7265, -2.7738, -3.0937, -2.6396]]],
       grad_fn=<LogSoftmaxBackward0>)
Traceback (most recent call last):
  File "/Users/Shayaan/Desktop/code/code-switched-pos-tagging/test.py", line 19, in <module>
    loss = masked_loss(model_probabilities, test_out)
  File "/Users/Shayaan/Desktop/code/code-switched-pos-tagging/trainer.py", line 11, in masked_loss
    alpha = torch.argmax(target, dim=-1) # Find the correct pos tag
TypeError: argmax(): argument 'input' (position 1) must be Tensor, not list